#include <iostream>
#include <string>
using namespace std;

class Median_finder {
private:
    int* nums;
    int size_of_array;
    int capacity_of_array;
public:
// Constructor
    Median_finder() {
        size_of_array = 0;
        capacity_of_array = 1;
        nums = new int[capacity_of_array]; }
// Destructor
    ~Median_finder() {
        delete[] nums; }
// Function to add numbers to the array using dynamic memory allocation
    void add_num(int num) {
        if (size_of_array == capacity_of_array) {
            int* temp = new int[capacity_of_array * 2];
            for (int i = 0; i < size_of_array; i++) {
                temp[i] = nums[i];}
            delete[] nums;
            nums = temp;
            capacity_of_array *= 2; }
        int i = size_of_array - 1;
        while (i >= 0 && nums[i] > num) {
            nums[i + 1] = nums[i];
            i--; }
        nums[i + 1] = num;
        size_of_array++;
        printArray();
    }
 // Function to print the array
    void printArray() {
        for (int i = 0; i < size_of_array; i++) {
            cout << nums[i] << "  ";}
        cout << endl; }
// Function to find the median
    double findMedian() {
        if (size_of_array % 2 == 0) {
            return (nums[size_of_array / 2 - 1]
                + nums[size_of_array / 2]) / 2.0; }
        else {
            return nums[size_of_array / 2]; }}
};

int main() {
    Median_finder m;
    m.add_num(7); m.add_num(6);
    m.add_num(9);m.add_num(10); m.add_num(2);
    cout << "Median is " << m.findMedian() << endl;
    return 0;
}               
